" This line should not be removed as it ensures that various options
" are properly set to work with the Vim-related packages available in
" Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes
" numerous options, so any other options should be set AFTER setting
" 'compatible'.
set nocompatible

"---------------------------------------------------------------------"
" "Syntax and Colors"                                                 "
"---------------------------------------------------------------------"

" Indentation rules
filetype plugin indent on

" Syntax highlighting
syntax on

" If using a dark background within the editing area and syntax
" highlighting turn on this option as well
set background=dark

" Color Scheme
colorscheme desert


"---------------------------------------------------------------------"
" "Settings"                                                          "
"---------------------------------------------------------------------"

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Misc
set autoread          " auto-reads a file that has been changed on disk
set autowrite         " auto-save before commands like :next and :make
set hidden            " Hide buffers when they are abandoned
set noerrorbells      " No beeping

" Dimensions
set lines=50          " Number of rows
set columns=80        " Number of columns
set textwidth=70      " Virtual line width

" Information
set showcmd           " Show (partial) command in status line.
set showmode          " Show the current mode
set laststatus=2      " always show status line
set statusline=%.40F%=%m\ %Y\ Line:\ %3l/%L[%3p%%]

" Navigation
set nu                " Set line numbering
set scrolloff=5       " keep at least 5 lines above/below
set mouse=a           " Enable mouse usage (all modes)
set mousehide         " Hide the mouse when typing

" Searching
set ignorecase        " Do case insensitive matching
set smartcase         " Do smart case matching
set incsearch         " Incremental search
set hlsearch          " highlight searches
set showmatch         " Show matching brackets.

" Tabs
set expandtab         " Use spaces instead of tabs
set tabstop=4         " How many spaces a tab measures
set shiftwidth=4      " Sets >> and << width
set autoindent

" Folding
set foldenable
au BufWinLeave * silent! mkview
au BufWinEnter * silent! loadview

" Backups
set nobackup          " Remove backup files
set noswapfile        " Remove swap files

" Change the <leader> key to ,
let mapleader=","


"---------------------------------------------------------------------"
" "Normal Mode bindings"                                              "
"---------------------------------------------------------------------"

" Enter command mode easier
nnoremap ; :

" Refreshes screen
nnoremap <Enter>    :nohl<CR><C-l>

" Mapping keys for multiple windows (navigation and resizing)
nnoremap __         :split 
nnoremap <Bar><Bar> :vsplit 
nnoremap <C-k>      <C-W>k
nnoremap <C-j>      <C-W>j
nnoremap <C-h>      <C-W>h
nnoremap <C-l>      <C-W>l
nnoremap +          <C-W>+
nnoremap =          <C-W>=
nnoremap -          <C-W>-

" Change cursor to move along rows, not lines. (useful for long lines)
nnoremap j          gj
nnoremap k          gk
nnoremap 0          g0
nnoremap $          g$

" Remembers last place before jump
nnoremap ''         `'
nnoremap g          m'g
nnoremap G          m'G

" Centers screen around cursor
nnoremap <space>    zz
nnoremap n          m'nzz
nnoremap N          m'Nzz

" Toggle Comments
let comment='#'     " by default -- change for specific languages
nnoremap #          :call ToggleComment(comment)<CR>


"---------------------------------------------------------------------"
" "Command Mode Bindings"                                             "
"---------------------------------------------------------------------"

" Aliasing accidental shifts
cnoremap W<CR>      w<CR>
cnoremap Q<CR>      q<CR>
cnoremap X<CR>      x<CR>
cnoremap Sh<CR>     sh<CR>
cnoremap sH<CR>     sh<CR>
cnoremap SH<CR>     sh<CR>


"---------------------------------------------------------------------"
" "Visual Mode Bindings"                                              "
"---------------------------------------------------------------------"

vnoremap #          :call ToggleComment(comment)<CR>


"---------------------------------------------------------------------"
" "Functions"                                                         "
"---------------------------------------------------------------------"

function! ToggleComment(comment)
    if matchstr(getline('.'), a:comment . ' ') == a:comment . ' '
        execute 's/' . escape(a:comment, '/') . ' //'
    elseif matchstr(getline('.'), a:comment) == a:comment
        execute 's/' . escape(a:comment, '/') . '//'
    else
        execute 's/^/' . escape(a:comment, '/') . ' /'
    endif
    normal! j0
endfunction
